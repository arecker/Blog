#+TITLE: jekyll-recker
#+SLUG: jekyll-recker.html
#+PERMALINK: jekyll-recker.html
#+STARTUP: showall
#+DESCRIPTION: my website's custom jekyll plugin

This is the jekyll plugin for my personal website.

* Installation

Add =jekyll-recker= to the =jekyll_plugins= group of your =Gemfile=.

#+BEGIN_SRC ruby
  group :jekyll_plugins do
    gem 'jekyll-recker'
  end
#+END_SRC

Add =jekyll-recker= to the list of plugins in jekyll's =_config.yml=.

#+BEGIN_SRC yaml
  # _config.yaml
  plugins:
    - jekyll-recker
#+END_SRC

Set the theme.

#+BEGIN_SRC yaml
theme: jekyll-recker
#+END_SRC

Install and enjoy.

#+BEGIN_SRC sh
bundle install
bundle exec jekyll serve
#+END_SRC

* Usage

** Commands

*** =slack=

The =slack= command posts a slack message advertising the latest
published jekyll blog post using a private incoming webhook.

Configure _config.yml

#+BEGIN_SRC yaml
  # _config.yml
  recker:
    slack:
      MyTeam:
        channel: '#blogs'   # required!
        username: 'blogbot' # required!
        emoji: ':robot:'    # required!
#+END_SRC

Multiple teams are supported too!

#+BEGIN_SRC yaml
  # _config.yml
  recker:
    slack:
      MyTeamA:
        channel: '#blogs'   # required!
        username: 'blogbot' # required!
        emoji: ':robot:'    # required!
      MyTeamB:
        channel: '#blogs'   # required!
        username: 'blogbot' # required!
        emoji: ':robot:'    # required!
      MyTeamC:
        channel: '#blogs'   # required!
        username: 'blogbot' # required!
        emoji: ':robot:'    # required!
#+END_SRC


Supply the private webhook through an environment variable.

#+BEGIN_SRC sh
  export SLACK_MYTEAM_WEBHOOK="https://..."  # SLACK_ + <MyTeam.upcase> + _WEBHOOK
#+END_SRC

Alternatively, add the command with which to retrieve the webhook in
_config.yml

#+BEGIN_SRC yaml
  # _config.yml
  recker:
    slack:
      MyTeam:
        webhook_cmd: cat secrets/my-teams-secret-webhook.txt
#+END_SRC

Run =bundle exec jekyll slack= to let it rip!

[[assets/images/example-slack.png]]

Using the =--dry= flag, you can preview the message post without
actually posting anything.

#+BEGIN_EXAMPLE
arecker@25732-arecker:~/src/blog$ be jekyll slack --dry
Configuration file: /Users/arecker/src/blog/_config.yml
jekyll-recker: reckerfamily: discovering webhook 
Configuration file: /Users/arecker/src/blog/_config.yml
jekyll-recker: reckerfamily: posting drag racing, windshield wipers, and alex's painting tips 
jekyll-recker: postign in dry mode, printing message 
jekyll-recker: BEGIN MESSAGE
Sunday, March 15 2020
drag racing, windshield wipers, and alex's painting tips
https://www.alexrecker.com/2020-03-15.html
END MESSAGE 
#+END_EXAMPLE

*** =tweet=

The =tweet= command tweets a link to the latest published jekyll blog
post.

Ensure the following environment variables are set,.

#+BEGIN_SRC sh
  export ACCESS_TOKEN_SECRET="..."
  export ACCESS_TOKEN="..."
  export CONSUMER_API_KEY="..."
  export CONSUMER_API_SECRET="..."
#+END_SRC

Alternatively, configure which commands to run to fetch the secrets.

#+BEGIN_SRC yaml
# _config.yml
recker:
  twitter:
    access_token_secret_cmd: cat secrets/access-token-secret
    access_token_cmd: cat secrets/access-token
    consumer_api_key_cmd: cat secrets/consumer-api-key
    consumer_api_secret_cmd: cat secrets/consumer-api-secret-key
#+END_SRC

Run =bundle exec jekyll tweet= to let it rip!

[[assets/images/example-tweet.png]]

Using the =--dry= flag, you can test your configuration without
actually tweeting anything.

#+BEGIN_EXAMPLE
arecker@25732-arecker:~/src/blog$ be jekyll tweet --dry
jekyll-recker: discovering credentials 
Configuration file: /Users/arecker/src/blog/_config.yml
Configuration file: /Users/arecker/src/blog/_config.yml
jekyll-recker: tweeting drag racing, windshield wipers, and alex's painting tips 
jekyll-recker: tweeting in dry mode, printing message 
jekyll-recker: BEGIN TWEET
Sunday, March 15 2020
drag racing, windshield wipers, and alex's painting tips
https://www.alexrecker.com/2020-03-15.html
END TWEET 
#+END_EXAMPLE

** Generators

*** =stats=

On build time, =jekyll-recker= calculates and stores the following
stats in the =site.data.stats= object, which are by default rendered in a
widget on the home page layout.

[[assets/images/example-stats.png]]

If you'd like, you can override the template with your own stats
widget by providing your own =_includes/stats.html=.

| Field Name      | Field Description                                    |
|-----------------+------------------------------------------------------|
| =posts=         | The total number of published posts.                 |
| =words.total=   | The total number of words from all published post.   |
| =words.average= | The average number of words for each published post. |
| =days.days=     | Current streak of daily, consecutive posts.          |
| =days.start=    | First day of current streak.                         |
| =days.end=      | Last day of current streak.                          |

Example:

#+BEGIN_SRC html
    <!-- _includes/stats.html -->

    <table>
      <tr>
        <th>Total Posts</th>
        <th>Total Words</th>
        <th>Average Words per Post</th>
        <th>Current Streak</th>
        <th>First day of current streak</th>
        <th>Last day of current streak</th>
      </tr>
      <tr>
        <td>{{ site.data.stats.posts }}</td>
        <td>{{ site.data.stats.words.total }}</td>
        <td>{{ site.data.stats.words.average }}</td>
        <td>{{ site.data.stats.days.days }}</td>
        <td>{{ site.data.stats.days.start }}</td>
        <td>{{ site.data.stats.days.end }}</td>
      </tr>
    </table>
#+END_SRC
