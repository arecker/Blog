#+TITLE: Email with Gnus and Docker
#+DATE: <2016-12-21 Wed>
#+STARTUP: indent showall
#+OPTIONS: toc:nil num:nil

For a while, I used a simple combination of [[http://www.offlineimap.org/][offlineIMAP]] and Gnus to
read my email.  OfflineIMAP cloned by Gmal account to a local maildir,
and Gnus read it on the fly using the built-in [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Maildir.html][nnmaildir]] backend.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods
               '(nnmaildir "personal"
                           (directory "~/.maildirs/personal")
                           (directory-files nnheader-directory-files-safe)
                           (get-new-mail nil)))
#+END_SRC

I decided to try the same configuration for my work email.  Gnus would
take several minutes to open while struggling to read my massive inbox
into memory.  Clearly, the thrifty nnmaildir was not going to cut it.

I remembered hearing in an [[https://vimeo.com/44778543][interview with Sacha Chua]] that John Wiegley
uses a local dovecot server in conjunction with Gnus to deal with his
large inbox volume.  Dovecot sounded promising, but the configuration
is hairy - especially for the use case of two distinct email
accounts.

But docker to the rescue!  Today I moved my offlineIMAP configuration
to a docker container and managed to serve it locally to Gnus with an
internal dovecot server.  Here's how to run it for yourself.

First, run the container, supplying the =IMAP_USER= and
=IMAP_PASSWORD= variables and binding it to a local port of your choice.

#+BEGIN_SRC sh
  docker run \
         --restart always \
         --name mailman \
         -p 127.0.0.1:143:143 \
         --env IMAP_USER="you@gmail.com" \
         --env IMAP_PASSWORD="yoursecretpassword" \
         -d arecker/mailman:latest
#+END_SRC

The container will get to work downloading your mailbox and writing it
to the =/home/docker/Maildir= volume.  At this point you can test the
mail server with this minimal [[http://www.mutt.org/][mutt]] configuration.

#+NAME: ~/.muttrc
#+BEGIN_EXAMPLE
  set mbox_type   = Maildir
  set folder      = imap://127.0.0.1
  set spoolfile	= imap://127.0.0.1
  set imap_user	= docker
  set imap_pass	= frozenfish
#+END_EXAMPLE

/Frozenfish/?  Is that a hard-coded password?  Yes it is.  Like I
said, dovecot is difficult to configure.  My container borrowed
largely from [[https://xdeb.org/node/1607][this blog post]], and I wasn't motivated enough to
configure something more secure.  After all, dovecot exists here to
simply serve the mail from the container to the host over the
published port.

At this point, you may not see any mail yet.  The initial sync takes
quite a bit of time, depending on your mailbox.

#+CAPTION: In my case, it took about three and a half years.
[[file:images/offlineimap.png]]

If all is well, you can hook it up to Gnus.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods
               '(nnimap "mail"
                        (nnimap-stream network)
                        (nnimap-address "localhost")
                        (nnimap-server-port 143)
                        (nnimap-authenticator login)))
#+END_SRC

If you'd like to avoid getting prompted by emacs for login
credentials, you can leave the same silly credentials in =~/.authinfo=.

#+NAME: ~/.authinfo
#+BEGIN_EXAMPLE
  machine localhost login docker password frozenfish port 143
#+END_EXAMPLE

And there you have it!  You should be able to browse to your new
containerized mail server.  The beauty of this setup is that it can be
duplicated.  Do handle my personal and work email, I now just spin up
two instances of this container and publish them on different ports.

#+BEGIN_EXAMPLE
  arecker@localhost:~$ docker ps
  CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                     NAMES
  520c6662abb7        arecker/mailman:latest   "/usr/bin/supervisord"   2 hours ago         Up 30 minutes       127.0.0.1:8144->143/tcp   mailman-work
  34443de7d812        arecker/mailman:latest   "/usr/bin/supervisord"   2 hours ago         Up 31 minutes       127.0.0.1:8143->143/tcp   mailman-personal
#+END_EXAMPLE

Each local server gets added to gnus as such.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods
               '(nnimap "personal"
                        (nnimap-stream network)
                        (nnimap-address "localhost")
                        (nnimap-server-port 8143)
                        (nnimap-authenticator login)))

  (add-to-list 'gnus-secondary-select-methods
               '(nnimap "work"
                        (nnimap-stream network)
                        (nnimap-address "localhost")
                        (nnimap-server-port 8144)
                        (nnimap-authenticator login)))
#+END_SRC

And I can finally get back to reading email.

[[file:images/gnus.png]]

Pull requests to [[https://github.com/arecker/mailman][my docker container]] are welcome, especially if you
know your way around Dovecot.  God knows I don't.
